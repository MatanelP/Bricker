matanel.pataki
ID

NOTES:

---- GAME OBJECTS ----

 ** Ball
    A basic game object with a velocity that is being flipped on every collision.

** BallCollisionCountdownAgent
    A game object which holds an Owner of type strategy that is looking to see when the ball collided
    X amount of times in order to activate a certain ability (such as changing Camera ect).

** Brick
    A basic game object that holds a strategy to active upon collision with the brick.

** GraphicLifeCounter
    Displays a graphical representation for the lives of the player. Updates it according to the game.

** MockPaddle
    A game object that appears as another paddle to help the player. It disappears after X hits.

** NumericLifeCounter
    Displays a numeric representation for the lives of the player. Updates it according to the game.

** OutOfBoundsBrick
    An object of this class deletes every other object that collides with it.
    There for after placing it under the window displayed to player, it deletes out of bound object
    like pucks and statuses.

** Paddle
    A game object that displaying a paddle for the player to move in order to play the game.

** Puck
    A game object that appears as a small grey ball to help/confuse the player.

** Status
    A game object that is to appear instead of a broken brick. It is being "drop" downwards for the player
    to collect. Once collected, it activates the affect being implemented by the collision strategy it holds.

---- BRICK STRATEGIES ----

** AddPaddleStrategy
    Holds a strategy to decorate with an ability to add another paddle to the game.

** BrickStrategyFactory
    It main objective it to return a strategy to be assign to a brick. Also manage the ability to
    assign a brick with a double (or even triple) strategies.

** ChangeCameraStrategy
    Holds a strategy to decorate with an ability to add change the camera to the game.

** CollisionStrategy
    An interface to be implemented by every collision strategy.
    Making sure each strategy has a on collision ability.

** PuckStrategy
    Holds a strategy to decorate with an ability to add 3 more balls to the game.

** RemoveBrickStrategy
    A basic strategy, removes a brick from the game after a ball hits it.

** RemoveBrickStrategyDecorator
    A decorator which holds a strategy to be decorated by another strategy.

** StatusStrategy
    An interface to be implemented by every collision strategy with a status implementation.
    Making sure each strategy with a status holds a method to be active by the status on order to
    perform the ability of the strategy.
    I chose this kind of design because it is easier to add more status strategy in the future.

** Strategies
    An enum which account for every possible strategy in the game.

** WideOrShrinkStrategy
    Holds a strategy to decorate with an ability to change a paddle size in the game.

---- ALGO QUESTIONS ----

** alotStudyTime
    _ Correctness _
        We sort both of the array. Then for each free time-slot, going from the biggest, we are looking for
        the biggest task we can fit in it. By doing that we are making sure that the most amount of tasks
        are being accounted for.
    _ Time Complexity _
        We sorting the arrays which takes O([n*log(n) + m*log(m)]) of complexity.
        Then we are iterating once over the arrays.
        Let k be the max of m and n (k=max(m,n)). So we get a total time complexity of O(k*log(k)).

** minLeap
    _ Correctness _
        For every leaf the frog is standing on, it is choosing the best leaf (out of the leaves it can just
        to) by calculating from witch one it can get the closest to the final leaf.
        By getting the max index of the next next possible leaf, we are making sure to provide the best
        decision.
    _ Time Complexity _
        We are iterating one time over the array, there for O(n) of complexity.

** bucketWalk
    _ Correctness _
        We take note of the fact that for every possible combination to fill the trough,
        we can either take all the possibility for filling the trough with 2 liters less,
        or with 1 litter less. Evidently we can deduce that in fact this problem is an implementation of
        the Fibonacci sequence and can be solved as such.
    _ Time Complexity _
        We are creating an array of size n, and iterating trough it while updating the current index
        with the values of the last two.
        Therefore we will get a time complexity O(n) for returning the value in the final index.

** numTrees
    _ Correctness _
       We take note of the fact that because every node i, while i is less than the total number of nodes.
       We can insert i-1 nodes to the left subtree and n-i nodes to the right subtree.
       Because the root it fixed. We can now recognize that in fact we a are looking for the n'th catalan
       number, and there for we can solve the problem using the same algorithm we learned in previous
       courses.
    _ Time Complexity _
        We are looping over n while performing O(1) operations. In total we get a time complexity of O(n).
